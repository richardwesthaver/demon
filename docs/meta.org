#+TITLE: demon
#+AUTHOR: ellis
#+EMAIL: richard.westhaver@gmail.com
#+description: Project Design Notes
#+OPTIONS: toc:nil num:nil
#+OPTIONS: prop:t timestamp:t p:t d:t c:t <:t
#+DATE: [2021-01-11 Mon]
#+keywords: emacs
#+html_link_home: https://github.com/richardwesthaver/demon
#+html_link_up: https://rwest.io/projects

#+name: commit_hash
#+BEGIN_SRC emacs-lisp :exports none :tangle no
  (shell-command-to-string "git rev-parse HEAD")
#+END_SRC

- VERSION: 0.1
- EXPORTED: {{{time(%Y-%m-%dT%T%z)}}}
- LAST MOD: {{{modification-time(%Y-%m-%dT%T%z)}}}
- COMMIT ID: call_commit_hash()
- AUTHOR: {{{author}}}
- EMAIL: {{{email}}}



This project is made public for educational purposes only, and has no
official Public API. All code is free and open-source, but I encourage
you to check out the dependency crates for starting a similar project.

* Getting Started
** Using the Makefile
	 - ~make help~
** Run a binary
	 - ~cargo run --bin $bin_name~
		 - demo
		 - nan
		 - bw
		 - curse
** Run an example
	 All examples are located in =bin/demo/examples=. Open a minimum of
	 3 terminals and run 'controller' 'peer' and 'sink' individually for
	 a fully functional local Demon.
	 
	 - ~cargo run --example $example_name~
		 - controller
		 - peer
		 - sink
** Testing the OS
** TODO Testing RF Signals
	 - [[https://wiki.gnuradio.org/index.php/InstallingGR#From_Binaries][install gnuradio]] on receiver machine
	 - [[https://greatscottgadgets.com/hackrf/one/][HackRF One]] in transmit mode
* TODO Abstract
* Core
	:PROPERTIES:
	:LOCATION: sys/core
	:END:
** Design
	 
The core primitives of our framework are inspired by the [[https://libp2p.io/][libp2p]]
network stack, and thus provides an opinionated implementation of many
of its core modules. You can see a full list of the types of modules,
and their current statuses [[https://libp2p.io/implementations/][here]].

The libp2p docs are quite in-depth, but here are some of the core
concepts of particular interest:
- *Peer* - An individual member of a libp2p network.
- *PeerID* - Identifies a unique Peer (by the [[https://github.com/multiformats/multihash][multihash]] of its Public Key)
- *Dial* - Opposed to *listen*, refers to an attempt to contact a peer
- *Connection* - A reliable, bidirectional communication channel between two peers
- *Transport* - The underlying interface used to build connections (TCP/UDP/UNIX/???)
- *Multiaddress* - A modular addressing format that supports combining network layers (/ip4/127.0.0.1/udp/1234)[fn:: see [[https://github.com/multiformats][multiformats]] for specifications]
- *STUN* - enabled by [[https://lwn.net/Articles/542629/][SO_REUSEPORT]] socket option, also known as hole-punching
- *TURN* - defined in [[https://tools.ietf.org/html/rfc5766][RFC 5766]], implemented as 'Circuit Relays' in libp2p
- *Switch* - sometimes called the "swarm" in libp2p source code, provides a combined dialing and listening interface

#+begin_src dot :exports results :file /dfs/media/demon/architecture.png
digraph {
  compound=true;
  node [ fontname="Liberation Mono" ];
  splines=true;
  subgraph cluster_zone {
      label="DMZ";
      REGISTRY;
      STATE;
      TX;
      subgraph cluster_listener {
        label="RX";
        DECODE -> COMMAND;
      }
  }

  subgraph cluster_z1 {
    label="ZONE";
    TRANSPORT;
    STATE;
    subgraph cluster_d1 {
      label="D1";
      color="red";
      rx1 -> rt1 -> tx1;
    }
  
    subgraph cluster_d2 {
      label="D2";
      rx2 ->rt2 ->tx2;
    }
  }

  subgraph cluster_d3 {
      label="D3";
      rx3 -> rt3 -> tx3;
  }
  CLIENT -> DECODE;
  TX -> TRANSPORT;
  TX -> rx3;
  TRANSPORT -> rx1;
  TRANSPORT -> rx2;
  tx1 -> SINK;
  tx2 -> SINK;
  tx3 -> SINK;
}
#+end_src
#+RESULTS:
[[https://demon.rwest.io/media/demon/architecture.png]]

* roadmap
#+INCLUDE: /srv/src/org/projects.org::*demon :only-contents t :minlevel 1

* Footnotes

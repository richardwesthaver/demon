#+TITLE: demon
#+AUTHOR: ellis
#+EMAIL: richard.westhaver@gmail.com
#+description: Project Design Notes
#+OPTIONS: toc:nil num:nil
#+OPTIONS: prop:t timestamp:t p:t d:t c:t <:t
#+DATE: [2021-01-11 Mon]
#+keywords: emacs
#+html_link_home: https://github.com/richardwesthaver/demon
#+html_link_up: https://rwest.io/projects
#+HTML_HEAD: <link rel="stylesheet" href="https://demon.rwest.io/media/css/page.css"/>

#+name: commit_hash
#+BEGIN_SRC emacs-lisp :exports none :tangle no
  (shell-command-to-string "git rev-parse HEAD")
#+END_SRC

- VERSION: 0.1
- EXPORTED: {{{time(%Y-%m-%dT%T%z)}}}
- LAST MOD: {{{modification-time(%Y-%m-%dT%T%z)}}}
- COMMIT ID: call_commit_hash()
- AUTHOR: {{{author}}}
- EMAIL: {{{email}}}



This project is made public for educational purposes only, and has no
official Public API. All code is free and open-source, but I encourage
you to check out the dependency crates for starting a similar project.

* Getting Started
** Using the Makefile
	 - ~make help~
** Run a binary
	 - ~cargo run --bin $bin_name~
		 - demo
		 - nan
		 - bw
		 - curse
** Run an example
	 All examples are located in =bin/demo/examples=. Open a minimum of
	 3 terminals and run 'controller' 'peer' and 'sink' individually for
	 a fully functional local Demon.
	 
	 - ~cargo run --example $example_name~
		 - controller
		 - peer
		 - sink
** Testing the OS
** TODO Testing RF Signals
	 - [[https://wiki.gnuradio.org/index.php/InstallingGR#From_Binaries][install gnuradio]] on receiver machine
	 - [[https://greatscottgadgets.com/hackrf/one/][HackRF One]] in transmit mode
* TODO Abstract
** TODO Motivation
** TODO A Distributed Drum Machine
	 :PROPERTIES:
	 :LOCATION: ddm.pd
	 :END:
	 I've decided to build a drum machine in PureData as a prototype and
	 to serve as a reference model throughout this documentation.
	 PureData is a fun visual programming language and although it is
	 intended for media generation, it can be very useful for
	 demonstrating computer-network interactions. Drum Machines can be
	 boiled down to a few core components, which we can build
	 individually and compose modularly - resulting in a functional,
	 although less than practical, digital musical instrument. We will
	 demonstrate a few different configurations of our drum machine, and
	 show how we might distribute the functionality of our instrument
	 across a network of computers.

*** What is a Drum Machine?

		#+CAPTION: from Sweetwater
		#+begin_quote
		Drum machines have matured immensely in the last 100 years. Back
		in the early 1930's, D-Rail invented the Rhythmicon - a large,
		gangly forerunner of today's drum machines. Fast forward to 1980,
		when the Linn LM-1 burst onto the scene as the first drum machine
		to use digitally sampled sounds - attracting acts like Prince and
		Devo. The Linn LM-1 would ultimately be overshadowed by Roland's
		TR-808, also released in 1980. The analog TR-808 (and later
		TR-909) have continued to shape electronic, hip-hop, house, R&B,
		and other genres - see Marvin Gaye's "Sexual Healing" and Kanye
		West's 808's and Heartbreak. While drum machines were originally
		conceived to fill in when live drums and drummers weren't
		available, they've revealed avenues of creativity all their own.
		#+end_quote

		#+CAPTION: The Linn LM-1 (1980)
		[[https://demon.rwest.io/media/demon/Linn_LM1.jpg]]

		#+CAPTION: The Roland TR-909 (1983)
		[[https://demon.rwest.io/media/demon/TR-909.jpg]]

		#+CAPTION: Ableton Drum Rack (2001)
		[[https://demon.rwest.io/media/demon/drumrack.jpg]]

		A [[https://en.wikipedia.org/wiki/Drum_machine][Drum Machine]] is an electronic musical instrument that creates
		percussion sounds, drum beats, and patterns. The first commercial
		drum machines started hitting the scene in the early 1980's and
		became the foundation for many types of electronic music. Unlike
		other instruments of the time, it relied less on a musician
		'playing' the instrument as it did being 'programmed' via a
		built-in step sequencer.

		Although out of scope of this document, it's worth noting that
		Drum Machines are an instrument unto themselves, and not to be
		thought of as some cheap knockoff, or a replacement for an actual
		drummer.
		
**** Synthesis vs Sampling
**** Programming
		 - step-sequencing
		 - drum kits
		 - song-sequencing

*** PureData, Max, and Creative Coding
		[[https://puredata.info/][PureData]] is the real-time graphical environment we will use to
		prototype our drum machine. It belongs to a family of programming
		languages called 'Patchers' which includes Max/MSP (now licensed
		by a music software company, Ableton AG). PureData is free and
		open-source, which makes it perfect for educational purposes, and
		shares the same /basic/ functionality as Max/MSP.
		
*** The Patches
		The drum machine consists of a set of patches, each of which takes
		an input and returns an output. Using the functionality provided
		in Pd, we can easily combine these 'subpatches' with virtual patch
		cables. First we'll explain each subpatch, and then we'll plug 'em
		in.
**** Voice Generator
		 A 'voice' is simply a unique sound - two voices can be generating
		 the same sound, but there is no such thing as a /shared/ voice.
		 For simplicity's sake, we will use a single /[[https://en.wikipedia.org/wiki/Monophony][monophonic]]/
		 oscillator to represent all of our drum sounds (kick, snare, hat,
		 bleeps and bloops).

**** Clock
		 The clock patch is built on a single metro object that emits a
		 bang at a set rate. It is used to control the sequencer, but can
		 also be patched to other types of objects :).

**** Sequencer
		 We've built a simple 16-step sequencer, with a few adjustable
		 properties that are assigned to each step.

**** Mixer
		 The mixer takes a signal as input, modifies it in some way, and
		 spits it back to the output. Ultimately one (or two, for stereo)
		 of these objects will always sit in front of the dac~ object,
		 which dispatches audio signals to the soundcard and speakers.

		 The most powerful feature of this patch is the 'gain' setting,
		 which controls the overall amplitude or strength of the input.
		 This is made even more evident by the behavior of sound
		 generators in Max-like languages, which have a tendency to output
		 at a single amplitude - the maximum. If you patch a white noise
		 generator directly into the dac~ object, you're in for quite the
		 treat. To account for this, our mixer is designed to be patched
		 anywhere in the drum machine, so we can not only adjust levels at
		 the end of the patch, like a regular mixer, but we can also
		 adjust levels of voice generators individually[fn:1].

		 We also have a chain of effects that can be adjusted, similar to
		 the way you would adjust the channel strip knobs on an analog
		 mixing board. These include a multipass filter, saturation, and
		 delay.

**** Controller
		 If you've come this far you're probably wondering how we use the
		 damn thing.. Until now all we've had to work with are trigger and
		 bang objects. Not much of an instrument. Well rest assured,
		 there's a patch for that.
		 
*** Patching

**** Single Voice
		
**** Dumb Machine

**** Distrubiting
		 - udpsend, udpreceive
		 - OSC

*** Problems
**** Distributing Audio Data
**** Time
**** Fault Detection
		 
** TODO Introduction
* TODO Modules
** Core
	 :PROPERTIES:
	 :LOCATION: sys/core/
	 :CATEGORY: core
	 :END:
*** Design
	 
 The core primitives of our framework are inspired by the [[https://libp2p.io/][libp2p]]
 network stack, and thus provides an opinionated implementation of many
 of its concepts. You can see a full list of modules
 and their current status [[https://libp2p.io/implementations/][here]].

 The libp2p docs are quite in-depth, but here are some of the core
 concepts of particular interest:
 - *Peer* - An individual member of a libp2p network.
 - *PeerID* - Identifies a unique Peer (by the [[https://github.com/multiformats/multihash][multihash]] of its Public Key)
 - *Dial* - Opposed to *listen*, refers to an attempt to contact a peer
 - *Connection* - A reliable, bidirectional communication channel between two peers
 - *Transport* - The underlying interface used to build connections (TCP/UDP/UNIX/???)
 - *Multiaddress* - A modular addressing format that supports combining network layers (/ip4/127.0.0.1/udp/1234)[fn:: see [[https://github.com/multiformats][multiformats]] for specifications]
 - *STUN* - enabled by [[https://lwn.net/Articles/542629/][SO_REUSEPORT]] socket option, also known as hole-punching
 - *TURN* - defined in [[https://tools.ietf.org/html/rfc5766][RFC 5766]], implemented as 'Circuit Relays' in libp2p
 - *Switch* - sometimes called the "swarm" in libp2p source code, provides a combined dialing and listening interface

 #+begin_src dot :exports results :file /dfs/media/demon/architecture.png
digraph {
  compound=true;
  node [ fontname="Liberation Mono" ];
  splines=true;
  subgraph cluster_zone {
      label="DMZ";
      REGISTRY;
      STATE;
      TX;
      subgraph cluster_listener {
        label="RX";
        DECODE -> COMMAND;
      }
  }

  subgraph cluster_z1 {
    label="ZONE";
    TRANSPORT;
    STATE;
    subgraph cluster_d1 {
      label="D1";
      color="red";
      rx1 -> rt1 -> tx1;
    }
  
    subgraph cluster_d2 {
      label="D2";
      rx2 ->rt2 ->tx2;
    }
  }

  subgraph cluster_d3 {
      label="D3";
      rx3 -> rt3 -> tx3;
  }
  CLIENT -> DECODE;
  TX -> TRANSPORT;
  TX -> rx3;
  TRANSPORT -> rx1;
  TRANSPORT -> rx2;
  tx1 -> SINK;
  tx2 -> SINK;
  tx3 -> SINK;
}
 #+end_src
 #+RESULTS:
 [[https://demon.rwest.io/media/demon/architecture.png]]
** Config
	 :PROPERTIES:
	 :LOCATION: sys/config/
	 :CATEGORY: config
	 :END:
** Database
	 :PROPERTIES:
	 :CREATED:  [2021-02-09 Tue 00:57]
	 :LOCATION: sys/db/
	 :DESCRIPTION: Graph Database and storage backend wrappers
	 :CATEGORY: database
	 :END:
	 There are already storage primitives provided by the [[*Core][core]],
	 specifically the Registrar. These types of storage are designed to
	 be /fast/ and /concurrent/ though, which comes with an important
	 cost - they are not scaleable.

	 To see why this is we need only look at the DemonId type. It is
	 defined as
	 #+begin_src rust
  pub type DemonId = u16;
	 #+end_src

	 It's just an unsigned 16-bit integer. Byte-aligned, simple, but
	 small with only 65,536 possible values. This type is fitting for
	 identifying Peers within Demons, which use local namespaces, and
	 thus gives us the same amount of flexibility as one can expect from
	 types with an equivalent size[fn:2]. It should NOT be used for other
	 types of identification, such as unique row indexes in a Relational
	 Database. Such a database wouldn't be that useful, with a maximum
	 row count of 65,536.

	 Instead, we'll create a dedicated module to store types of data
	 where we don't want to worry about these limits.

*** TODO Design
		:PROPERTIES:
		:CREATED:  [2021-02-09 Tue 02:08]
		:END:
		We've chosen a Graph-based architecture for our database, which
		fits nicely with the general theme of the project. As such, we'll
		use [[https://indradb.github.io/][IndraDB]] for the database middleware via [[https://crates.io/crates/indradb-lib][indradb-lib]].
	 
*** The Backends

		First of all, we have no interest in building a database backend
		from scratch (for now). It sounds like a messy business and we have
		enough messes to deal with in a project of this size. Instead, we
		can create a common interface for connecting any number of
		backends to our project.

**** Sled
**** RocksDB
**** Cached
** CLI
	 :PROPERTIES:
	 :CATEGORY: cli
	 :LOCATION: sys/cli/
	 :END:
** Networking
	 :PROPERTIES:
	 :LOCATION: sys/net/
	 :CATEGORY: net
	 :END:
** Cmd
	 :PROPERTIES:
	 :CATEGORY: cmd
	 :LOCATION: sys/cmd/
	 :END:
** Brain
	 :PROPERTIES:
	 :CATEGORY: brain
	 :LOCATION: sys/brain/
	 :END:

* Roadmap
#+INCLUDE: /srv/src/org/projects.org::*demon :only-contents t :minlevel 1

* Footnotes
[fn:1] This pre-gain and post-gain setup is known as [[https://www.izotope.com/en/learn/gain-staging-what-it-is-and-how-to-do-it.html][gain staging]].
[fn:2]  [[https://en.wikipedia.org/wiki/Port_(computer_networking)][IP Ports]], for example.	


